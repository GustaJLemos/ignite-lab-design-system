{"version":3,"file":"Text.4f6eae62.js","sources":["../../src/components/Text.tsx"],"sourcesContent":["import { Slot } from '@radix-ui/react-slot'; \n\nimport clsx from 'clsx';\n\n/** \n * Esse slot que vem do radix, é um cara que vai \"transforamr\" o nosso componente no primeiro filho dele\n * como assim? se eu chamar o meu Text em algum lugar, e passar asChild: true, ele vira a tag Slot, e eu preciso\n * renderizar um filho, então eu também passo a tag children: ( <p>tag aq</p> ) por ex, e agora o meu componente text\n * que antes era um span, agora virou um paragrafo, assim eu consigo deixar o meu componente ainda mais dinâmico\n * passando até qual tag eu quero utilizar nesse text, como por ex um text, um paragrafo um título\n *  basicamente o slot pega todas as nossas props q estamos passando, e passa para o primeiro componente que vem dentro do children\n*/\n\nexport interface TextProps {\n  size?: 'sm' | 'md' |'lg',\n  children: React.ReactNode;\n  asChild?: boolean;\n  className?: string;\n}\n\nexport function Text({ size = 'md', children, asChild = false, className }: TextProps) {\n  const TagRendered = asChild ? Slot : 'span'\n\n  return (\n    <TagRendered \n      className={clsx(\n        'text-gray-100 font-sans',\n        {\n          'text-xs': size === 'sm',\n          'text-sm': size === 'md',\n          'text-md': size === 'lg',\n        },\n        className\n      )}\n    >\n      {children}\n    </TagRendered>\n  )\n}"],"names":["Text","size","children","className","_jsx","asChild","Slot","clsx","__name"],"mappings":"qNAoBO,SAAAA,EAAA,CAAc,KAAAC,EAAA,KAAS,SAAAC,EAAMA,QAAAA,EAAAA,GAAoB,UAAAC,CAA4B,EAAA,CAGlF,OAAAC,EAFAC,EAAAC,EAAA,OAEA,CACc,UAAAC,EAAA,0BAAA,CAGR,UAAAN,IAAA,KACsB,UAAAA,IAAA,KACA,UAAAA,IAAA,IACA,EAAAE,CAAA,EAEb,SAAAD,CACT,CAAA,CAKR,CAlBOM,EAAAR,EAAA"}